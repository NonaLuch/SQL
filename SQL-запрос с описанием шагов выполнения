/* 1. Узнаем, когда была первая транзакция для каждого студента. Начиная с этой даты, мы будем собирать его баланс уроков. 
with first_payments as
    (
    select user_id, min(transaction_datetime::date) as first_payment_date
    from skyeng_db.payments
where status_name = 'success'
	  and id_transaction is not null
    group by user_id
    )
    
 /* 2. Соберем таблицу с датами за каждый календарный день 2016 года.   
, all_dates as
    (
    select distinct (class_start_datetime::date) as dt
    from skyeng_db.classes 
    where date_part ('year', class_start_datetime) = '2016'
    )
    
 /* 3. Узнаем, за какие даты имеет смысл собирать баланс для каждого студента.
, all_dates_by_user as
    (
    select f.user_id, a.dt
    from first_payments f
    join all_dates a on a.dt >= f.first_payment_date
    )
    
 /* 4. Найдем все изменения балансов, связанные с успешными транзакциями.  
, payments_by_dates as
    (
    select user_id, (transaction_datetime:: date) as payment_date, sum (classes) as transaction_balance_change
    from skyeng_db.payments
    where status_name = 'success'
    group by 1,2
    )
    
 /* 5. Найдем баланс студентов, который сформирован только транзакциями.   
, payments_by_dates_cumsum as
    (
    select a.user_id, a.dt, p.transaction_balance_change,
    sum (coalesce (p.transaction_balance_change,0)) 
    over (partition by a.user_id order by a.dt rows between unbounded preceding and current row) as transaction_balance_change_cs
    from all_dates_by_user a
    left join payments_by_dates p  on p.user_id= a.user_id and a.dt=p.payment_date
    )
    
 /* 6. Найдем изменения балансов из-за прохождения уроков.   
, classes_by_dates as
    (
    select user_id, (class_start_datetime:: date) as class_date, count (class_start_datetime)*-1 as classes
    from skyeng_db.classes
    where class_status in ('success', 'failed_by_students')
    and class_type!='trial'
    group by 1,2
    )
    
 /* 7. По аналогии с уже проделанным шагом для оплат создадим CTE для хранения кумулятивной суммы количества пройденных уроков.    
, classes_by_dates_dates_cumsum as
    (
    select a.user_id, a. dt, c.classes, sum (coalesce (c.classes,0)) 
    over (partition by a.user_id order by dt rows between unbounded preceding and current row) as classes_cs
    from all_dates_by_user a
    left join classes_by_dates c on a.user_id=c.user_id and a.dt=c.class_date
    )
    
/* 8. Создадим CTE balances с вычисленными балансами каждого студента.    
, balances as
    (
    select p.user_id, p.dt, transaction_balance_change, transaction_balance_change_cs, classes, classes_cs, (classes_cs+ transaction_balance_change_cs) as balance 
    from payments_by_dates_cumsum p
    join classes_by_dates_dates_cumsum c on p.dt= c.dt and p.user_id=c.user_id
    )
    
/* 9. Выберите топ-1000 строк из CTE balances с сортировкой по user_id и dt.     
select *
from balances
order by 1,2
limit 1000

/* 10. Посмотрим, как менялось общее количество уроков на балансах студентов.
select dt
     , sum (transaction_balance_change) as sumtransaction_balance_change
     , sum (transaction_balance_change_cs) as sumtransaction_balance_change_cs
     , sum (classes) as sumclasses
     , sum (classes_cs) as sumclasses_cs
     , sum (balance) as sumbalance
   from balances
   group by 1
   order by 1
